/*
 * DistributedWorkerJFrame.java
 *
 * Created on 13 July 2007, 19:08
 */

package fractal.gui.worker;

import fractal.producer.render.RenderListener;
import fractal.producer.result.PixelValue;
import fractal.producer.worker.Worker;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.JFileChooser;

/**
 *
 * @author  Owner
 */
public class DistributedWorkerJFrame extends javax.swing.JFrame implements RenderListener {
    
    Worker worker = new Worker();
    /** Creates new form DistributedWorkerJFrame */
    public DistributedWorkerJFrame() {
        initComponents();
        worker.addRenderListener(this);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jtDirectory = new javax.swing.JTextField();
        jbBrowseDirectory = new javax.swing.JButton();
        jtStatus = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Distributed Render Worker");
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Distributed Directory"));
        jtDirectory.setEditable(false);
        jtDirectory.setText("C:\\Render\\");

            jbBrowseDirectory.setText("Browse");
            jbBrowseDirectory.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jbBrowseDirectoryActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
            jPanel1.setLayout(jPanel1Layout);
            jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jtDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(241, Short.MAX_VALUE)
                    .addComponent(jbBrowseDirectory)
                    .addContainerGap())
            );
            jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jtDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                    .addComponent(jbBrowseDirectory)
                    .addContainerGap())
            );

            jtStatus.setEditable(false);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(10, 10, 10)
                            .addComponent(jtStatus))
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            pack();
        }// </editor-fold>//GEN-END:initComponents
    
    private void jbBrowseDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBrowseDirectoryActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.showOpenDialog(this);
        File file = chooser.getSelectedFile();
        if( file == null ) return;
        worker.setDirectory(file.toString());
        jtDirectory.setText(file.toString());
    }//GEN-LAST:event_jbBrowseDirectoryActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        DistributedWorkerJFrame dwjf = new DistributedWorkerJFrame();
        dwjf.setVisible(true);
        if( args.length>0)dwjf.setDirectory(args[0]);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbBrowseDirectory;
    private javax.swing.JTextField jtDirectory;
    private javax.swing.JTextField jtStatus;
    // End of variables declaration//GEN-END:variables
    public void renderStarted(){
        jtStatus.setText("Rendering");
    }
    public void renderFinished(){
        jtStatus.setText("Finished");
    }
    public void updatePixel(int x, int y, PixelValue pixel){
        jtStatus.setText("Rendering "+x+" "+y);
    }
    public void updateWholeView(BufferedImage bi) {}
    public void setDirectory(String s) {
        worker.setDirectory(s);
        jtDirectory.setText(s);
    }
}