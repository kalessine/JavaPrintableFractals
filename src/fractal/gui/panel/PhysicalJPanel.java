/*
 * PhysicalJPanel.java
 *
 * Created on 10 February 2007, 09:43
 */

package fractal.gui.panel;

import fractal.producer.Coordinates;
import fractal.producer.Fractal;
import fractal.producer.FractalEvent;
import fractal.producer.FractalListener;
import fractal.producer.PrecisionContext;
import fractal.producer.calc.ComplexNumberFactory;
import fractal.producer.calc.NumberFactory;
import fractal.producer.colour.ColourMap;
import fractal.producer.exception.FractalSizeException;
import fractal.producer.exception.RenderException;
import fractal.producer.formula.Formula;
import fractal.producer.render.Renderer;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import ranab.img.gif.GifImage;

/**
 *
 * @author  Owner
 */
public class PhysicalJPanel extends javax.swing.JPanel implements FractalListener {
    
    /** Creates new form PhysicalJPanel */
    public PhysicalJPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jtImaginary = new javax.swing.JTextField();
        jtWidth = new javax.swing.JTextField();
        jtHeight = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jtReal = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtPixelWidth = new javax.swing.JTextField();
        jtPixelHeight = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jcbAspect = new javax.swing.JComboBox();
        jcbAspectLock = new javax.swing.JComboBox();
        jbResetCoords = new javax.swing.JButton();
        jbUpdateCoords = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jcbPrecision = new javax.swing.JComboBox();
        jbSaveJpeg = new javax.swing.JButton();
        jbSaveAnimated = new javax.swing.JButton();

        jLabel1.setText("Real");

        jLabel2.setText("Imaginary");

        jLabel7.setText("Width");

        jLabel4.setText("Height");

        jtImaginary.setText("jTextField2");

        jtWidth.setText("jTextField3");

        jtHeight.setText("jTextField4");

        jLabel6.setText("Pixel Height");

        jLabel5.setText("Pixel Width");

        jtReal.setText("jTextField1");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Physical Parameters");

        jtPixelWidth.setEnabled(false);
        jtPixelWidth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtPixelWidthKeyReleased(evt);
            }
        });

        jtPixelHeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtPixelHeightKeyReleased(evt);
            }
        });

        jLabel8.setText("Aspect Ratio");

        jcbAspect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Square Aspect", "A Series Landscape", "A Series Portrait" }));

        jcbAspectLock.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Lock Width", "Lock Height" }));

        jbResetCoords.setText("Reset Coords");
        jbResetCoords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbResetCoordsActionPerformed(evt);
            }
        });

        jbUpdateCoords.setText("Update Coords");
        jbUpdateCoords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUpdateCoordsActionPerformed(evt);
            }
        });

        jLabel9.setText("Precision(Decimal Places)");

        jcbPrecision.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "16", "24", "32", "64", "128", "256" }));
        jcbPrecision.setEnabled(false);
        jcbPrecision.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbPrecisionActionPerformed(evt);
            }
        });

        jbSaveJpeg.setText("Save Jpeg");
        jbSaveJpeg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveJpegActionPerformed(evt);
            }
        });

        jbSaveAnimated.setText("Save Animated Gif");
        jbSaveAnimated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveAnimatedActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(32, 32, 32)
                .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(330, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(jLabel7)
                            .add(jLabel2)
                            .add(jLabel1))
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jtReal)
                            .add(jtImaginary)
                            .add(jtWidth)
                            .add(jtHeight, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jcbPrecision, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 77, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(jbUpdateCoords, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbResetCoords)))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel8)
                    .add(jLabel6)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jtPixelHeight, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .add(jtPixelWidth, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE)
                    .add(jcbAspect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jcbAspectLock, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(jbSaveJpeg)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jbSaveAnimated)))
                .add(97, 97, 97))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(jcbPrecision, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jtReal, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jtImaginary, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(jtWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(jtHeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbUpdateCoords)
                    .add(jbResetCoords))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(jLabel5))
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jcbAspectLock, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jtPixelWidth, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jtPixelHeight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(jcbAspect, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jbSaveJpeg)
                    .add(jbSaveAnimated))
                .add(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbSaveJpegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveJpegActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jbSaveJpegActionPerformed

    private void jtPixelWidthKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtPixelWidthKeyReleased
        try{ 
        fractal.setWidth(Integer.parseInt(jtPixelWidth.getText()));
        }catch(FractalSizeException fse) {
            fse.printStackTrace();
           jtPixelWidth.setText(Integer.toString(fractal.getWidth()));
        }catch(NumberFormatException nfe) {
           jtPixelWidth.setText(Integer.toString(fractal.getWidth()));
        }
    }//GEN-LAST:event_jtPixelWidthKeyReleased

    private void jtPixelHeightKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtPixelHeightKeyReleased
        try{ 
        fractal.setHeight(Integer.parseInt(jtPixelHeight.getText()));
        }catch(FractalSizeException fse) {
            fse.printStackTrace();
           jtPixelHeight.setText(Integer.toString(fractal.getHeight()));
        }catch(NumberFormatException nfe) {
           jtPixelHeight.setText(Integer.toString(fractal.getHeight()));
        }

    }//GEN-LAST:event_jtPixelHeightKeyReleased

    private void jbSaveAnimatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveAnimatedActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.showSaveDialog(this);
        File file = chooser.getSelectedFile();
        if( file == null ) return;
        try{
        FileOutputStream out = new FileOutputStream(file);
        GifImage gif = new GifImage(fractal.getWidth(),fractal.getHeight());
        ColourMap map = fractal.getColourMap();
        double step = map.getTotalSize()/map.getMapSize();
        //step=step*2;
        fractal.startRender();
        while(fractal.isRendering()) {
           try{ Thread.sleep(100); }catch(InterruptedException tie) {}
        }
        double offset = map.getOffset();
        BufferedImage image = fractal.getImage();
        gif.getGraphics().drawImage(image,0,0,null);
        int delay = 20;
        gif.setDelay(delay);
        for(int i=0;i<map.getMapSize();i++) {
            GifImage g = new GifImage(fractal.getWidth(),fractal.getHeight());
            map.setOffset(map.getOffset()+step);
            map.buildColourMap();
            fractal.fireColourChanged(this);
            image = fractal.getImage();
            g.getGraphics().drawImage(image,0,0,null);
            g.setDelay(delay);
            gif.addImage(g);
        }
        map.setOffset(offset);
        gif.setIterationCount(0);
        gif.encode(out);
        out.flush();
        out.close();
        }catch(IOException io) {
         JOptionPane.showMessageDialog(this,io.getMessage(),"Error!",JOptionPane.ERROR_MESSAGE);
        }catch(RenderException re) {
         re.printStackTrace();
        }
        

    }//GEN-LAST:event_jbSaveAnimatedActionPerformed
    
    ItemListener aspect = new ItemListener() {
        public void itemStateChanged(ItemEvent ie) {
            int aspect = jcbAspect.getSelectedIndex();
            fractal.setAspect(aspect);
        }
    };
    ItemListener aspectLock = new ItemListener() {
        public void itemStateChanged(ItemEvent ie) {
            int lock = jcbAspectLock.getSelectedIndex();
            if( lock == Fractal.LOCK_HEIGHT){
                jtPixelHeight.setEnabled(false);
                jtPixelWidth.setEnabled(true);
            }
            if( lock == Fractal.LOCK_WIDTH) {
                jtPixelWidth.setEnabled(false);
                jtPixelHeight.setEnabled(true);
            }
            fractal.setLock(lock);
        }
    };
            
    private void jcbPrecisionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbPrecisionActionPerformed
        int precision = Integer.parseInt( (String)jcbPrecision.getSelectedItem() );
        PrecisionContext pc = new PrecisionContext(precision);
        fractal.setPrecisionContext(pc);
    }//GEN-LAST:event_jcbPrecisionActionPerformed
    
    private void jbUpdateCoordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUpdateCoordsActionPerformed
        ComplexNumberFactory cfactory = fractal.getPrecisionContext().getComplexNumberFactory();
        NumberFactory nfactory = fractal.getPrecisionContext().getNumberFactory();
        Number x = nfactory.parse(jtReal.getText());
        Number y = nfactory.parse(jtImaginary.getText());
        Number w = nfactory.parse(jtWidth.getText());
        Number h = nfactory.parse(jtHeight.getText());
        Coordinates coords = Coordinates.createCoordinates(x,y,w,h,fractal.getPrecisionContext().getMathContext());
        fractal.setCoordinates(coords);
    }//GEN-LAST:event_jbUpdateCoordsActionPerformed
    
    private void jbResetCoordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbResetCoordsActionPerformed
        Formula f = (Formula)fractal.getFormulaArray().get(0);
        fractal.setCoordinates(f.getDefaultCoordinates());
    }//GEN-LAST:event_jbResetCoordsActionPerformed
    private Fractal fractal = null;
    
    public Fractal getFractal() {
        return fractal;
    }
    
    public void setFractal(Fractal fractal) {
        if( this.fractal!=null)this.fractal.removeFractalListener(this);
        this.fractal = fractal;
        this.fractal.addFractalListener(this);
        this.physicalValueChanged(null);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton jbResetCoords;
    private javax.swing.JButton jbSaveAnimated;
    private javax.swing.JButton jbSaveJpeg;
    private javax.swing.JButton jbUpdateCoords;
    private javax.swing.JComboBox jcbAspect;
    private javax.swing.JComboBox jcbAspectLock;
    private javax.swing.JComboBox jcbPrecision;
    private javax.swing.JTextField jtHeight;
    private javax.swing.JTextField jtImaginary;
    private javax.swing.JTextField jtPixelHeight;
    private javax.swing.JTextField jtPixelWidth;
    private javax.swing.JTextField jtReal;
    private javax.swing.JTextField jtWidth;
    // End of variables declaration//GEN-END:variables
    public void physicalValueChanged(FractalEvent fe){
        jtReal.setText(fractal.getCoordinates().getLeft().toString());
        jtImaginary.setText(fractal.getCoordinates().getBottom().toString());
        jtWidth.setText(fractal.getCoordinates().getWidth().toString());
        jtHeight.setText(fractal.getCoordinates().getHeight().toString());
        this.jtPixelWidth.setText(Integer.toString(fractal.getWidth()));
        this.jtPixelHeight.setText(Integer.toString(fractal.getHeight()));
        jcbAspectLock.removeItemListener(aspectLock);
        this.jcbAspectLock.setSelectedIndex(fractal.getLock());
        jcbAspectLock.addItemListener(aspectLock);
        this.jcbAspect.removeItemListener(aspect);
        this.jcbAspect.setSelectedIndex(fractal.getAspect());
        this.jcbAspect.addItemListener(aspect);
    }
    public void transformValueChanged(FractalEvent fe){}
    public void formulaValueChanged(FractalEvent fe){}
    public void colourValueChanged(FractalEvent fe){}
    public void rendererChanged(Renderer fe){}
    
    
}
