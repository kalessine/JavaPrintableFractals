/*
 * TransformParameters.java
 *
 * Created on 25 February 2007, 21:25
 */

package fractal.gui.panel.util;
import fractal.gui.panel.util.editors.BooleanPropertyEditor;
import fractal.gui.panel.util.editors.ColorPropertyEditor;
import fractal.gui.panel.util.editors.ComplexNumberPropertyEditor;
import fractal.gui.panel.util.editors.DimensionPropertyEditor;
import fractal.gui.panel.util.editors.DoublePropertyEditor;
import fractal.gui.panel.util.editors.FilePropertyEditor;
import fractal.gui.panel.util.editors.FloatPropertyEditor;
import fractal.gui.panel.util.editors.IntegerPropertyEditor;
import fractal.gui.panel.util.editors.StringPropertyEditor;
import fractal.producer.calc.ComplexNumber;
import fractal.producer.formula.builtin.Mandelbrot;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.beans.PropertyEditor;
import java.beans.PropertyEditorManager;
import java.io.File;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Vector;
import javax.swing.Box;
import javax.swing.JComponent;
import javax.swing.JLabel;

/**
 *
 * @author  Owner
 */
public class PropertyEditorJPanel extends javax.swing.JPanel implements GridBagConstants {
static {
    //
    // Register property editors
    //
    
    // Glyph
    //PropertyEditorManager.registerEditor(com.sun.glf.util.Glyph.class, GlyphPropertyEditor.class);

    // Color
    PropertyEditorManager.registerEditor(java.awt.Color.class, ColorPropertyEditor.class);

    // Boolean
    PropertyEditorManager.registerEditor(boolean.class, BooleanPropertyEditor.class);
    PropertyEditorManager.registerEditor(Boolean.class, BooleanPropertyEditor.class);

    // Font
//    PropertyEditorManager.registerEditor(Font.class, FontPropertyEditor.class);

    // Dimension
    PropertyEditorManager.registerEditor(Dimension.class, DimensionPropertyEditor.class);

    // File
    PropertyEditorManager.registerEditor(File.class, FilePropertyEditor.class);

    // Integer
    PropertyEditorManager.registerEditor(Integer.class, IntegerPropertyEditor.class);
    PropertyEditorManager.registerEditor(int.class, IntegerPropertyEditor.class);

    // Float
    PropertyEditorManager.registerEditor(Float.class, FloatPropertyEditor.class);
    PropertyEditorManager.registerEditor(float.class, FloatPropertyEditor.class);

    // Double
    PropertyEditorManager.registerEditor(Double.class, DoublePropertyEditor.class);
    PropertyEditorManager.registerEditor(double.class, DoublePropertyEditor.class);

    // String 
    PropertyEditorManager.registerEditor(String.class, StringPropertyEditor.class);
    
    PropertyEditorManager.registerEditor(ComplexNumber.class, ComplexNumberPropertyEditor.class);

}
    
    /** Set of editor UIs used to configure the different bean properties */
    private PropertyEditorUI[] editorUIs;

    JComponent currentComponent = null;
    /** Creates new form TransformParameters */
    public PropertyEditorJPanel() {
        initComponents();
        setLayout(new BorderLayout());
        currentComponent = buildConfigurationPanel(new Mandelbrot());
        add(currentComponent,BorderLayout.CENTER);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 258, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
  /**
   *  Shamelessly Ripped From Vincent Hardy's Graphics Layer Framework
   *
   * Inspects a bean object and builds a user interface 
   * to set its properties
   *
   * @param bean the bean which should be configured
   * @return configuration panel containing all the controls to set the bean properties.
   *         The panel is initialized with the current bean properties values.
   */
  private JComponent buildConfigurationPanel(Object bean){
    if(bean==null)
      return new JLabel("Nothing selected");

    //
    // First, get all the methods which follow the Beans naming pattern
    //
    Method methods[][] = getPropertyMethods(bean.getClass());

    //
    // Now, build the configuration panel
    //
    GridBagPanel panel = new GridBagPanel();

    //
    // For each property, add a line in the configPanel
    // The property name is written on the left and 
    // the property setting appears on the right
    int nProperties = methods!=null?methods.length:0;
    Vector editorUIs = new Vector();

    for(int i=0; i<nProperties; i++){
      Method getSet[] = methods[i];
      String propertyName = getPropertyName(getSet[0].getName());
      Class targetType = getSet[0].getReturnType();
      
      // Get property editor for this type
      PropertyEditor editor = PropertyEditorManager.findEditor(targetType);

      if(editor != null ){
	JLabel title = new JLabel(propertyName);
	panel.add(title, 0, i, 1, 1, 
			WEST, NONE, 0, 0);

	// Add padding
	panel.add(Box.createHorizontalStrut(10), 1, i, 1, 1, CENTER, NONE, 0, 0);
	PropertyEditorUI editorUI = new PropertyEditorUI(editor, getSet[0], getSet[1]);
	panel.add(editorUI, 2, i, 1, 1, WEST, HORIZONTAL, 1, 0);
        editorUI.load(bean);
	editorUIs.addElement(editorUI);	
      }
    }

    setEditorUIs(editorUIs);
    return panel;
  }

  /**
   * @return the set of get and set methods of the input bean class
   *         for all the properties which follow the Java Beans naming
   *         pattern.
   */
  public Method[][] getPropertyMethods(Class beanClass){
    Vector v = new Vector();
    Method m[] = beanClass.getMethods();
    int n = m!=null?m.length:0;
    for(int i=0; i<n; i++){
      if(m[i].getName().startsWith("get")){
	Method gs[] = new Method[2];
	gs[0] = m[i];
	Class params[] = m[i].getParameterTypes();
	if(params==null || params.length==0){
	  // Check for corresponding set method
	  try{
	    Method setMethod = beanClass.getMethod("set" + m[i].getName().substring(3),
						   new Class[] { m[i].getReturnType() });
	    gs[1] = setMethod;
	    v.addElement(gs);
	  }catch(NoSuchMethodException e){
          }
	  catch(SecurityException e){
          }
	}
      }
    }
    Method pm[][] = new Method[v.size()][2];
    v.copyInto(pm);
    return pm;
  }
  /**
   * @return the property name for a given set method
   * @param set/get method name. If the name is not the one of a set or get method
   *        name, the result is not guaranteed.
   */
  public String getPropertyName(String methodName){
    String propertyName = methodName.substring(3);
    
    // Now, parse name and look for upper case letter
    // A space is inserted in front of each upper case letter
    // to get a more user friendly name
    char buff[] = propertyName.toCharArray();
    int n = buff!=null?buff.length:0;
    char data[] = new char[n*2];
    int j=1;
    data[0] = buff[0];
    for(int i=1; i<n; i++){
      char c = buff[i];
      if(Character.isUpperCase(c))
	data[j++] = ' ';
      data[j++] = c;
    }

    return new String(data, 0, j);
  }
  
  /** 
   * @param the set of PropertyEditorUIs to use to configure the current bean
   */
  private void setEditorUIs(Vector editorUIs){
    if(editorUIs==null)
      throw new IllegalArgumentException();
    this.editorUIs = new PropertyEditorUI[editorUIs.size()];
    editorUIs.copyInto(this.editorUIs);
  }
    public void setBean(Object o) {
        remove(currentComponent);
        currentComponent = buildConfigurationPanel(o);
        add(currentComponent,BorderLayout.CENTER);
        repaint();
    }
    public void load(Object o) {
         for(int i=0; i<editorUIs.length; i++) {
            editorUIs[i].load(o);
         }
    }
    public void save(Object o) {
        try{ 
        for(int i=0; i<editorUIs.length; i++) {
            editorUIs[i].save(o);
         }
        }catch(Exception ex) {
          ex.printStackTrace();
        }
    }
}
