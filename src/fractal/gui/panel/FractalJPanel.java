/*
 * FractalJPanel.java
 *
 * Created on 9 February 2007, 14:19
 */

package fractal.gui.panel;

import fractal.gui.frames.StatisticsInspectorJFrame;
import fractal.producer.Coordinates;
import fractal.producer.Fractal;
import fractal.producer.FractalEvent;
import fractal.producer.FractalListener;
import fractal.producer.exception.RenderException;
import fractal.producer.render.RenderListener;
import fractal.producer.render.Renderer;
import fractal.producer.result.PixelValue;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import javax.swing.JOptionPane;

/**
 *
 * @author  Owner
 */
public class FractalJPanel extends javax.swing.JPanel implements RenderListener,FractalListener {
    
    
    
    /** Creates new form FractalJPanel */
    public FractalJPanel() {
        initComponents();
    }
    
    private Fractal fractal = null;
    StatisticsInspectorJFrame stats = null;
    private int aspect = 0;
    private BufferedImage image;
    
    public void paint(Graphics g) {
        if( fractal==null||image == null&&!fractal.isRendering() ) {
            paintRenderingWindow(g);
            return;
        }
        //if( fractal.isRendering())paintRenderingWindow(g);
        if( image!=null)
            g.drawImage(image,0,0,null);
        else paintRenderingWindow(g);
    }
    
    public void paintRenderingWindow(Graphics g) {
        g.drawString("Rendering",(getWidth()/2)-30,getHeight()/2);
    }
    
    public void render() {
        if( fractal == null ) return;
        if( fractal.isRendering()) {
            System.out.println("Fractal is rendering");
            return;
        }
        try{
            fractal.startRender();
        }catch( RenderException re) {
            JOptionPane.showMessageDialog(this,re.getMessage(),"Render Eror",JOptionPane.ERROR_MESSAGE);
        }
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDoubleBuffered(false);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mouseMovedStats(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 417, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 338, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void mouseMovedStats(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseMovedStats
        if( stats == null ) return;
        if(!stats.isVisible() ) return;
        if( evt.getX() < 0 || evt.getX() > fractal.getWidth())return;
        if( evt.getY()<0 ||evt.getY()>fractal.getHeight())return;
        stats.setPixelValue(fractal.getRenderer().getPixelValue(evt.getX(),evt.getY()));
    }//GEN-LAST:event_mouseMovedStats
    
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        Coordinates coords = fractal.getCoordinates();
        Number x = coords.getXValue(evt.getX(),getWidth());
        Number y = coords.getYValue(evt.getY(),getHeight());
        if( fractal.isRendering() ) fractal.interruptRender();
        if( evt.getButton()== MouseEvent.BUTTON1 ) {
            coords.zoom(x,y,2d);
        } else if( evt.getButton()==MouseEvent.BUTTON2) {
            coords.zoom(x,y,1d);
        }else if( evt.getButton()==MouseEvent.BUTTON3 ) {
            coords.zoom(x,y,0.5d);
        }
        fractal.firePhysicalChanged(this);
        render();
    }//GEN-LAST:event_formMouseClicked
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void renderFinished() {
        try{
            this.image=fractal.getRenderer().getImage();
        }catch(RenderException re) {
            JOptionPane.showMessageDialog(this,re.getMessage(),"Render Error",JOptionPane.ERROR_MESSAGE);
        }
        repaint();
    }
    public void renderStarted() {
        System.out.println("Render Started");
    }
    public void updatePixel(int x, int y, PixelValue val){
        
        Graphics g = getGraphics();
        g.setColor(val.getColour());
        g.drawLine(x,y,x,y);
    }
    public void updateWholeView(BufferedImage bi) {
        image=bi;
        repaint();
       // Graphics g= getGraphics();
       // g.drawImage(bi,0,0,null);
    }
    public void setFractal(Fractal f) {
        if( fractal!=null) fractal.getRenderer().removeRenderListener(this);
        this.fractal=f;
        fractal.addFractalListener(this);
        fractal.getRenderer().addRenderListener(this);
    }
    public void setStats(StatisticsInspectorJFrame stats) {
        this.stats=stats;
    }
    
    public int getAspect() {
        return aspect;
    }
    public void setFractalSize(int w, int h) {
        Dimension s = new Dimension(w,h);
        setPreferredSize(s);
        setMaximumSize(s);
        setMinimumSize(s);
        setSize(s);
        invalidate();
        repaint();
    }
    
    public void physicalValueChanged(FractalEvent fe){
//       render();
    }
    public void transformValueChanged(FractalEvent fe){}
    public void formulaValueChanged(FractalEvent fe){}
    public void colourValueChanged(FractalEvent fe){
    }
    public void rendererChanged(Renderer ren) {
        System.out.println("RendererChanged");
        ren.removeRenderListener(this);
        ren.addRenderListener(this);
    }
    public int getWidth() {
        if( fractal==null) return super.getWidth();
        return fractal.getWidth();
    }
    public int getHeight() {
        if(fractal==null)return super.getWidth();
        return fractal.getHeight();
    }
    public Dimension getPreferredSize() { return new Dimension(getWidth(),getHeight());}
}
